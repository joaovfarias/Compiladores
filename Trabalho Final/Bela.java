/* Generated By:JavaCC: Do not edit this line. Bela.java */
import ast.*;
import java.io.*;
import java.util.ArrayList;

public class Bela implements BelaConstants {
  public static void main(String args[]) throws ParseException, IOException {

    FileInputStream fs = new FileInputStream(new File(args[0]));

    Bela parser = new Bela(fs);

    Prog arvore = parser.Bela();

    String codigoJava = geraCodigo(arvore, args[0]);
    System.out.println(codigoJava);
  }

  public static String geraCodigo(Prog prog, String arquivo) throws IOException {
      String codigoJava = prog.geraCodigoJava();

      // Salva o cÃ³digo gerado em um arquivo .java
      File file = new File("Programa.java");
      if (file.exists()) {
          file.delete();
      }
      FileWriter writer = new FileWriter(file);
      writer.write(codigoJava);
      writer.flush();
      writer.close();

      return codigoJava;
  }

// BELA -> MAIN FUNC?
  static final public Prog Bela() throws ParseException {
  Main main;
  Fun f;
  ArrayList<Fun> funcoes = new ArrayList<Fun>();
    main = Main();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCAO:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      f = Func();
                 funcoes.add(f);
    }
    {if (true) return new Prog(main, funcoes);}
    throw new Error("Missing return statement in function");
  }

// MAIN -> "main" "(" ")" "{" VARDECL SEQCOMANDOS "}"
  static final public Main Main() throws ParseException {
  ArrayList<VarDecl> varDecls = new ArrayList<VarDecl>();
  ArrayList<Comando> seqComandos = new ArrayList<Comando>();
  VarDecl vd;
    jj_consume_token(MAIN);
    jj_consume_token(APAR);
    jj_consume_token(FPAR);
    jj_consume_token(ACHAVES);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      vd = VarDecl();
                     varDecls.add(vd);
    }
    seqComandos = SeqComandos();
    jj_consume_token(FCHAVES);
    {if (true) return new Main(varDecls, seqComandos);}
    throw new Error("Missing return statement in function");
  }

// VARDECL -> ("var" TIPO TOKEN_id ";")*
  static final public VarDecl VarDecl() throws ParseException {
  Token tipo, idToken;
    jj_consume_token(VAR);
    tipo = Tipo();
    idToken = jj_consume_token(ID);
    jj_consume_token(PVIRGULA);
    {if (true) return new VarDecl(tipo.image, idToken.image);}
    throw new Error("Missing return statement in function");
  }

// TIPO -> "float" | "bool" | "void"
  static final public Token Tipo() throws ParseException {
  Token tipo;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIPOFLOAT:
      tipo = jj_consume_token(TIPOFLOAT);
                         {if (true) return tipo;}
      break;
    case TIPOBOOL:
      tipo = jj_consume_token(TIPOBOOL);
                        {if (true) return tipo;}
      break;
    case TIPOVOID:
      tipo = jj_consume_token(TIPOVOID);
                        {if (true) return tipo;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// SEQCOMANDOS -> (COMANDO)*
  static final public ArrayList<Comando> SeqComandos() throws ParseException {
  ArrayList<Comando> comandos = new ArrayList<Comando>();
  Comando c;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case RETURN:
      case PRINTLN:
      case ID:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      c = Comando();
                    comandos.add(c);
    }
    {if (true) return comandos;}
    throw new Error("Missing return statement in function");
  }

// COMANDO -> TOKEN_id ( "(" LISTAEXP? ")" ";" 
//                     | ("=" (EXP ";"  | "readInput" "(" ")" ";") ) 
//         | "if" EXP "then" "{" SEQCOMANDOS "}" ";"
//         | "while" EXP "{" SEQCOMANDOS "}" ";"
//         | "return" EXP ";"
//         | "printLn" EXP ";"
  static final public Comando Comando() throws ParseException {
  Token idToken = null, ifToken = null, whileToken = null, returnToken = null, printToken = null;
  Exp exp, condicao = null;
  ArrayList<Exp> listaExp = null;
  ArrayList<Comando> seqComandos = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      idToken = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case APAR:
        jj_consume_token(APAR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case APAR:
        case TRUE:
        case FALSE:
        case NUM:
        case ID:
          listaExp = ListaExp();
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        jj_consume_token(FPAR);
        jj_consume_token(PVIRGULA);
        {if (true) return new CChamadaFun(idToken.beginLine, idToken.image, listaExp);}
        break;
      case ATRIBUICAO:
        jj_consume_token(ATRIBUICAO);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case APAR:
        case TRUE:
        case FALSE:
        case NUM:
        case ID:
          exp = Exp();
          jj_consume_token(PVIRGULA);
                                              {if (true) return new CAtribuicao(idToken.beginLine, idToken.image, exp);}
          break;
        case readInput:
          jj_consume_token(readInput);
          jj_consume_token(APAR);
          jj_consume_token(FPAR);
          jj_consume_token(PVIRGULA);
                                               {if (true) return new CReadInput(idToken.beginLine, idToken.image);}
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case IF:
      ifToken = jj_consume_token(IF);
      condicao = Exp();
      jj_consume_token(THEN);
      jj_consume_token(ACHAVES);
      seqComandos = SeqComandos();
      jj_consume_token(FCHAVES);
      jj_consume_token(PVIRGULA);
      {if (true) return new CIf(ifToken.beginLine, condicao, seqComandos);}
      break;
    case WHILE:
      whileToken = jj_consume_token(WHILE);
      condicao = Exp();
      jj_consume_token(ACHAVES);
      seqComandos = SeqComandos();
      jj_consume_token(FCHAVES);
      jj_consume_token(PVIRGULA);
      {if (true) return new CWhile(whileToken.beginLine, condicao, seqComandos);}
      break;
    case RETURN:
      returnToken = jj_consume_token(RETURN);
      exp = Exp();
      jj_consume_token(PVIRGULA);
      {if (true) return new CReturn(returnToken.beginLine, exp);}
      break;
    case PRINTLN:
      printToken = jj_consume_token(PRINTLN);
      exp = Exp();
      jj_consume_token(PVIRGULA);
      {if (true) return new CPrint(printToken.beginLine, exp);}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// EXP -> "(" EXP OP EXP ")" | FATOR
  static final public Exp Exp() throws ParseException {
  Exp left, right;
  Token op;
  Exp fator;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case APAR:
      jj_consume_token(APAR);
      left = Exp();
      op = Op();
      right = Exp();
      jj_consume_token(FPAR);
      {if (true) return new EOpExp(op.image, left, right);}
      break;
    case TRUE:
    case FALSE:
    case NUM:
    case ID:
      fator = Fator();
      {if (true) return fator;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// FATOR -> TOKEN_id ("(" LISTAEXP? ")")? | TOKEN_numliteral | "true" | "false"
  static final public Exp Fator() throws ParseException {
  Token idToken, numToken = null;
  ArrayList<Exp> listaExp = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      idToken = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case APAR:
        jj_consume_token(APAR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case APAR:
        case TRUE:
        case FALSE:
        case NUM:
        case ID:
          listaExp = ListaExp();
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        jj_consume_token(FPAR);
        {if (true) return new EChamadaFun(idToken.image, listaExp);}
        break;
      default:
        jj_la1[10] = jj_gen;
        {if (true) return new EVar(idToken.image);}
      }
      break;
    case NUM:
      numToken = jj_consume_token(NUM);
                       {if (true) return new EFloat(Float.parseFloat(numToken.image));}
      break;
    case TRUE:
      jj_consume_token(TRUE);
             {if (true) return new ETrue();}
      break;
    case FALSE:
      jj_consume_token(FALSE);
              {if (true) return new EFalse();}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// OP -> "+" | "-" | "*" | "/" | "&&" | "||" | "<" | ">" | "=="
  static final public Token Op() throws ParseException {
  Token op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPMAIS:
      op = jj_consume_token(OPMAIS);
                    {if (true) return op;}
      break;
    case OPMENOS:
      op = jj_consume_token(OPMENOS);
                     {if (true) return op;}
      break;
    case OPMULT:
      op = jj_consume_token(OPMULT);
                    {if (true) return op;}
      break;
    case OPDIV:
      op = jj_consume_token(OPDIV);
                   {if (true) return op;}
      break;
    case OPE:
      op = jj_consume_token(OPE);
                 {if (true) return op;}
      break;
    case OPOU:
      op = jj_consume_token(OPOU);
                  {if (true) return op;}
      break;
    case OPMENOR:
      op = jj_consume_token(OPMENOR);
                     {if (true) return op;}
      break;
    case OPMAIOR:
      op = jj_consume_token(OPMAIOR);
                     {if (true) return op;}
      break;
    case OPIGUAL:
      op = jj_consume_token(OPIGUAL);
                     {if (true) return op;}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// LISTAEXP -> EXP ("," EXP)*
  static final public ArrayList<Exp> ListaExp() throws ParseException {
  ArrayList<Exp> listaExp = new ArrayList<Exp>();
  Exp exp;
    exp = Exp();
                listaExp.add(exp);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_4;
      }
      jj_consume_token(VIRGULA);
      exp = Exp();
                            listaExp.add(exp);
    }
    {if (true) return listaExp;}
    throw new Error("Missing return statement in function");
  }

// FUNC -> ("fun" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}")+
  static final public Fun Func() throws ParseException {
  Token tipo, idToken;
  ArrayList<ParamFormalFun> listaArg = new ArrayList<ParamFormalFun>();
  ArrayList<VarDecl> varDecls = new ArrayList<VarDecl>();
  ArrayList<Comando> seqComandos = new ArrayList<Comando>();
  VarDecl vd;
    jj_consume_token(FUNCAO);
    tipo = Tipo();
    idToken = jj_consume_token(ID);
    jj_consume_token(APAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIPOFLOAT:
    case TIPOBOOL:
    case TIPOVOID:
      listaArg = ListaArg();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(FPAR);
    jj_consume_token(ACHAVES);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_5;
      }
      vd = VarDecl();
                     varDecls.add(vd);
    }
    seqComandos = SeqComandos();
    jj_consume_token(FCHAVES);
    {if (true) return new Fun(idToken.image, listaArg, tipo.image, varDecls, seqComandos);}
    throw new Error("Missing return statement in function");
  }

//LISTAARG -> TIPO TOKEN_id ("," TIPO TOKEN_id)*
  static final public ArrayList<ParamFormalFun> ListaArg() throws ParseException {
  ArrayList<ParamFormalFun> listaArg = new ArrayList<ParamFormalFun>();
  Token tipo, idToken;
    tipo = Tipo();
    idToken = jj_consume_token(ID);
                                 listaArg.add(new ParamFormalFun(tipo.image, idToken.image));
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_6;
      }
      jj_consume_token(VIRGULA);
      tipo = Tipo();
      idToken = jj_consume_token(ID);
                                             listaArg.add(new ParamFormalFun(tipo.image, idToken.image));
    }
    {if (true) return listaArg;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public BelaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x400,0x1c000,0xd40000,0x3040,0x203040,0x20040,0xd40000,0x3040,0x3040,0x40,0x3000,0xff000000,0x0,0x1c000,0x400,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4,0x0,0x0,0x10,0x18,0x18,0x0,0x10,0x18,0x18,0x0,0x18,0x1,0x2,0x0,0x0,0x2,};
   }

  /** Constructor with InputStream. */
  public Bela(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Bela(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new BelaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Bela(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new BelaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Bela(BelaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(BelaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[37];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 37; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
